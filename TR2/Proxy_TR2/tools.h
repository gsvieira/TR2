#ifndef TOOLS_H
#define TOOLS_H


#include <QThread>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <regex>
#include <string.h>
#include "logger.h"
#include "connection.h"
#include "httpparser.h"

/**
 * @brief The SpiderDump class
 * This class is to a QThread, and runs in other thread,
 * his objective is do some task (dump of spide) for an specific
 * url (e.g. struct.unb.br), emmiting an signal after task is done
 */
class SpiderDump : public QThread
{
    Q_OBJECT

public:
    /*!
     * \brief The task_type enum
     * Enum to indicate the type of task
     */
    enum task_type{
        SPIDER_TASK,
        DUMP_TASK
    };

    /*!
     * \brief The errors enum
     * Enum to indicate the error getted in execution of task
     */
    enum errors{
        SUCCESS,
        HOSTNAME_NOT_EXTRACTED,
        CONNECTION_ERROR,
    };

    /*!
     * \brief The spider_element struct
     * Struct to keep the spider links with all the info needed to print the
     * spider
     */
    struct spider_element{
        int level;
        bool resolved;
        QString parent;
        QString relative_link;
    };

    /**
     * @brief SpiderDump
     * Creant and element Spider Dump and define the typer and url of the task
     *
     * @param type type of this task (dump or spider)
     * @param url_base url that will be dumped or spied
     */
    SpiderDump(SpiderDump::task_type type, QString url_base);
    ~SpiderDump() override;

    /**
     * @brief run
     * Not implemented yet
     */
    void run() override;

    /**
     * @brief getUrl_base
     * Return the url base, passed at the creation of the object
     *
     * @return (QString)
     */
    QString getUrl_base() const;

    /**
     * @brief getType
     * Return the type of the task, passed at the creation of the object
     *
     * @return (SpiderDump::task_type)
     */
    SpiderDump::task_type getType() const;

    /**
     * @brief getReturn_error
     * Return the error of the task done
     *
     * @return (SpiderDump::errors)
     */
    SpiderDump::errors getReturn_error() const;

    /*!
     * \brief getSpider_tree
     * Return the list of links in a website. Each element contains the depth (level)
     * parent link and relative link.
     *
     * \return (std::vector<SpiderDump::spider_element>*)
     */
    std::vector<SpiderDump::spider_element> *getSpider_tree() const;

    /*!
     * \brief getDump_files
     * Return the list of filenames created by the dump from relative links of a
     * website
     *
     * \return (std::vector<QString>*)
     */
    std::vector<QString> *getDump_files() const;

signals:
    /**
     * @brief task_finished
     * Emit a signal saying that task is already finished, passing the task finished
     * as param
     */
    void task_finished(SpiderDump*);

private:
    /*!
     * \brief url_base
     * Url of task that will be dumped or spied
     */
    QString url_base;

    /*!
     * \brief host
     * Hostname for using with GET requests on the field Host
     */
    QString hostname;

    /*!
     * \brief type
     * Type of the task (spider or dump)
     */
    SpiderDump::task_type type;

    /*!
     * \brief return_error
     * Error of the task done
     */
    SpiderDump::errors return_error;

    /*!
     * \brief spider_tree
     * List of all the links of the page up to depth 4. Each element has parent link, level and relative link
     */
    std::vector<SpiderDump::spider_element> spider_tree;

    /*!
     * \brief dump_files
     * List of all the files generated by the dump
     */
    std::vector<QString> dump_files;

    /* --------- Private methods --------- */

    /*!
     * @brief parse_html
     * Parses the HTML passed as parameter and returns a list of links
     * contained in that page
     *
     * @param html a QString containing the HTML for links parsing
     * @return a vector containing all the links of the HTML page
     */
    std::vector<QString> parse_html(QString html);

    /*!
     * \brief request_html
     * Send a GET request to the instance's url_base at port 80
     * \param relative_link A QString containing a relative link (starts with /)
     * \return The HTTP response body in a char*, probably HTML.
     */
    char *request_html(QString relative_link);

    /*!
     * \brief element_exist_in_list
     * Check if a relative link is present in any element of a spider_element vector
     * \param element QString with the relative path to be found
     * \param list vector of spider_elements to be searched
     * \return bool with True indicating that an element was found and False that it wasn't
     */
    bool element_exist_in_list(QString element, std::vector<spider_element> list);

    /*!
     * \brief is_from_this_domain
     * \param link QString containing the link to be checked
     * \return True if it starts with the url_base, False if it does not
     */
    bool is_from_this_domain(QString link);

    /*!
     * \brief extract_relative_link
     * Remove the url_base from a link and return it
     * \param link A QString that starts with the url_base
     * \return A QString without the url_base
     */
    QString extract_relative_link(QString link);

    /*!
     * \brief convert_link2path
     * Convert from a relative link of a webpage to a valid file name
     * \param link webpage relative link
     * \param prefix A QString containing the path to the output folder
     * \return a valid file name
     */
    QString convert_link2path(QString link, QString prefix="../dump/");

    /*!
     * \brief save_file
     * Correctly save a dump file based on its link
     * \param link relative_link obtained through spider
     * \param r HTML to record
     */
    void save_file(QString link, QString r);

    /*!
     * \brief change_links
     * Looks at the spider tree and name conversion to change the links correctly
     * \param html original HTML
     * \return Modified HTML with the changed links
     */
    QString change_links(QString html);
};

#endif // TOOLS_H
